basePath: /
definitions:
  dto.AboutData:
    properties:
      text:
        type: string
    type: object
  dto.AppSettings:
    properties:
      env:
        example: development
        type: string
      version:
        example: 1.0.0
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      bikeModel:
        type: string
      email:
        type: string
      expoPushToken:
        type: string
      firstName:
        type: string
      gender:
        $ref: '#/definitions/models.UserGender'
      lastName:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      password:
        maxLength: 25
        minLength: 8
        type: string
      phone:
        type: string
      username:
        type: string
    required:
    - email
    - password
    type: object
  dto.EmptyObject:
    type: object
  dto.EmptyResponse:
    properties:
      data:
        $ref: '#/definitions/dto.EmptyObject'
      message:
        example: OK
        type: string
      status:
        example: 200
        type: integer
    type: object
  dto.GetAboutResponse:
    properties:
      data:
        $ref: '#/definitions/dto.AboutData'
      message:
        example: OK
        type: string
      status:
        example: 200
        type: integer
    type: object
  dto.GetSettingsResponse:
    properties:
      data:
        $ref: '#/definitions/dto.AppSettings'
      message:
        example: OK
        type: string
      status:
        example: 200
        type: integer
    type: object
  dto.JwtToken:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/dto.JwtToken'
      message:
        example: OK
        type: string
      status:
        example: 200
        type: integer
    type: object
  dto.ProfileResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserResponse'
      message:
        example: OK
        type: string
      status:
        example: 200
        type: integer
    type: object
  dto.ResendCodeRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.SocialLink:
    properties:
      link:
        example: https://t.me/moto_alert
        type: string
      name:
        example: Канал в Telegram
        type: string
      type:
        example: Telegram
        type: string
    type: object
  dto.SocialLinkResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.SocialLink'
        type: array
      message:
        example: OK
        type: string
      status:
        example: 200
        type: integer
    type: object
  dto.UserResponse:
    properties:
      accidentId:
        type: integer
      allergies:
        type: string
      bikeModel:
        type: string
      bloodGroup:
        type: string
      chronicDiseases:
        type: string
      code:
        type: string
      comment:
        type: string
      createdAt:
        type: string
      dateOfBirth:
        type: string
      email:
        type: string
      expoPushToken:
        type: string
      firstName:
        type: string
      gender:
        type: string
      geoUpdatedAt:
        type: string
      hasHepatitis:
        type: string
      hasHiv:
        type: string
      hasHypertension:
        type: string
      heightCm:
        type: integer
      id:
        type: integer
      isBanned:
        type: boolean
      isQrCodeEnabled:
        type: boolean
      isVerified:
        type: boolean
      lastAuth:
        type: string
      lastName:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      medications:
        type: string
      phone:
        type: string
      username:
        type: string
      uuid:
        type: string
      weightKg:
        type: integer
    type: object
  dto.VerifyCodeRequest:
    properties:
      code:
        maxLength: 6
        minLength: 6
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
  dto.VerifyCodeResponse:
    properties:
      data:
        $ref: '#/definitions/dto.JwtToken'
      message:
        example: OK
        type: string
      status:
        example: 200
        type: integer
    type: object
  dto.VerifyEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  errors.ErrorResponse:
    properties:
      error:
        example: BadRequestException
        type: string
      message:
        example: some error message
        type: string
      status:
        example: 400
        type: integer
    type: object
  models.UserGender:
    enum:
    - MALE
    - FEMALE
    type: string
    x-enum-varnames:
    - MALE
    - FEMALE
host: localhost:3000
info:
  contact: {}
  description: Moto-Alert API
  title: Moto-Alert API
  version: 1.0.0
paths:
  /app/about:
    get:
      consumes:
      - application/json
      description: Get app description text
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetAboutResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get app description text
      tags:
      - app/ public
  /app/privacyPolicy:
    get:
      consumes:
      - application/json
      description: Get privacy policy PDF
      produces:
      - application/pdf
      responses:
        "200":
          description: OK
      summary: Get privacy policy PDF
      tags:
      - app/ public
  /app/settings:
    get:
      consumes:
      - application/json
      description: Get app settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetSettingsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get app settings
      tags:
      - app/ public
  /app/socialLinks:
    get:
      consumes:
      - application/json
      description: Get app social links
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SocialLinkResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get app social links
      tags:
      - app/ public
  /auth/create:
    post:
      consumes:
      - application/json
      description: Creates new user if not exists
      parameters:
      - description: User creation request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create user
      tags:
      - auth/ public
  /auth/forgotPassword:
    post:
      consumes:
      - application/json
      description: Sends email for a new password
      parameters:
      - description: Forgot password body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Forgot password
      tags:
      - auth/ public
  /auth/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: Login body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Login
      tags:
      - auth/ public
  /auth/logout:
    post:
      description: Logout and remove expo push token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmptyResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Logout
      tags:
      - auth/ private
  /auth/resendCode:
    post:
      consumes:
      - application/json
      description: Sends a new verification code
      parameters:
      - description: Resend code body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ResendCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Resend code
      tags:
      - auth/ public
  /auth/verifyCode:
    post:
      consumes:
      - application/json
      description: Verify code from email
      parameters:
      - description: Verify code body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyCodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VerifyCodeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Verify code
      tags:
      - auth/ public
  /auth/verifyEmail:
    post:
      consumes:
      - application/json
      description: Verify if email is free
      parameters:
      - description: Verify email body
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.EmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Verify email
      tags:
      - auth/ public
  /user/profile:
    get:
      description: Returns user data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Profile
      tags:
      - user/ private
swagger: "2.0"
