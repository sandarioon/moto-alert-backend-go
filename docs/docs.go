// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/app/about": {
            "get": {
                "description": "Get app description text",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "app/ public"
                ],
                "summary": "Get app description text",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetAboutResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/privacyPolicy": {
            "get": {
                "description": "Get privacy policy PDF",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "app/ public"
                ],
                "summary": "Get privacy policy PDF",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/app/settings": {
            "get": {
                "description": "Get app settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "app/ public"
                ],
                "summary": "Get app settings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GetSettingsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/socialLinks": {
            "get": {
                "description": "Get app social links",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "app/ public"
                ],
                "summary": "Get app social links",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.SocialLinkResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/create": {
            "post": {
                "description": "Creates new user if not exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth/ public"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/forgotPassword": {
            "post": {
                "description": "Sends email for a new password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth/ public"
                ],
                "summary": "Forgot password",
                "parameters": [
                    {
                        "description": "Forgot password body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth/ public"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logout and remove expo push token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth/ private"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/resendCode": {
            "post": {
                "description": "Sends a new verification code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth/ public"
                ],
                "summary": "Resend code",
                "parameters": [
                    {
                        "description": "Resend code body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResendCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verifyCode": {
            "post": {
                "description": "Verify code from email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth/ public"
                ],
                "summary": "Verify code",
                "parameters": [
                    {
                        "description": "Verify code body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyCodeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verifyEmail": {
            "post": {
                "description": "Verify if email is free",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth/ public"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "description": "Verify email body",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.VerifyEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.EmptyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/edit": {
            "post": {
                "description": "Edit user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user/ private"
                ],
                "summary": "Edit user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "description": "Returns user data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user/ private"
                ],
                "summary": "Profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/updateLocation": {
            "post": {
                "description": "Update user location",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user/ private"
                ],
                "summary": "Update location",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/errors.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AboutData": {
            "type": "object",
            "properties": {
                "text": {
                    "type": "string"
                }
            }
        },
        "dto.AppSettings": {
            "type": "object",
            "properties": {
                "env": {
                    "type": "string",
                    "example": "development"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "bikeModel": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expoPushToken": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/models.UserGender"
                },
                "lastName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "password": {
                    "type": "string",
                    "maxLength": 25,
                    "minLength": 8
                },
                "phone": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.EmptyObject": {
            "type": "object"
        },
        "dto.EmptyResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.EmptyObject"
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.GetAboutResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.AboutData"
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.GetSettingsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.AppSettings"
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.JwtToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "dto.LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.JwtToken"
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ProfileResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserResponse"
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.ResendCodeRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.SocialLink": {
            "type": "object",
            "properties": {
                "link": {
                    "type": "string",
                    "example": "https://t.me/moto_alert"
                },
                "name": {
                    "type": "string",
                    "example": "Канал в Telegram"
                },
                "type": {
                    "type": "string",
                    "example": "Telegram"
                }
            }
        },
        "dto.SocialLinkResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SocialLink"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.UserMedicalInfo": {
            "type": "object",
            "properties": {
                "allergies": {
                    "type": "string"
                },
                "bloodGroup": {
                    "type": "string"
                },
                "chronicDiseases": {
                    "type": "string"
                },
                "dateOfBirth": {
                    "type": "string"
                },
                "hasHepatitis": {
                    "type": "string"
                },
                "hasHiv": {
                    "type": "string"
                },
                "hasHypertension": {
                    "type": "string"
                },
                "heightCm": {
                    "type": "integer"
                },
                "medications": {
                    "type": "string"
                },
                "weightKg": {
                    "type": "integer"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "accidentId": {
                    "type": "integer"
                },
                "bikeModel": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expoPushToken": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "geoUpdatedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isQrCodeEnabled": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "medicalInfo": {
                    "$ref": "#/definitions/dto.UserMedicalInfo"
                },
                "phone": {
                    "type": "string"
                },
                "qrCodeUrl": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyCodeRequest": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "maxLength": 6,
                    "minLength": 6
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "dto.VerifyCodeResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.JwtToken"
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "dto.VerifyEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "errors.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "BadRequestException"
                },
                "message": {
                    "type": "string",
                    "example": "some error message"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "models.UserGender": {
            "type": "string",
            "enum": [
                "MALE",
                "FEMALE"
            ],
            "x-enum-varnames": [
                "MALE",
                "FEMALE"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Moto-Alert API",
	Description:      "Moto-Alert API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
