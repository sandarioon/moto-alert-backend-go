package main

import (
	"os"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	_ "github.com/sandarioon/moto-alert-backend-go/docs" // docs is generated by Swag CLI
	"github.com/sandarioon/moto-alert-backend-go/internal/app"
	"github.com/sandarioon/moto-alert-backend-go/internal/auth"
	"github.com/sandarioon/moto-alert-backend-go/internal/notification"
	"github.com/sandarioon/moto-alert-backend-go/internal/transaction"
	"github.com/sandarioon/moto-alert-backend-go/internal/user"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	postgres "github.com/sandarioon/moto-alert-backend-go/pkg/database"
	"github.com/sandarioon/moto-alert-backend-go/pkg/notifications/email"

	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
)

// @Version 1.0.0
// @Host localhost:3000
// @BasePath /
// @Title Moto-Alert API
// @Description Moto-Alert API
func main() {
	logrus.SetFormatter(new(logrus.JSONFormatter))

	if err := initConfig(); err != nil {
		logrus.Fatalf("error initializing configs: %s", err.Error())
	}

	if err := godotenv.Load(); err != nil {
		logrus.Fatalf("error loading .env variables: %s", err.Error())
	}

	logrus.Printf("Moto-Alert app started on port %d, env: %s", viper.GetInt("general.port"), viper.GetString("general.env"))

	dbLogger, err := postgres.NewDB(postgres.Config{
		Host:     viper.GetString("database.host"),
		Port:     viper.GetString("database.port"),
		Username: viper.GetString("database.user"),
		DBName:   viper.GetString("database.database"),
		Password: os.Getenv("DB_PASSWORD"),
		SSLMode:  "disable",
	})

	if err != nil {
		logrus.Fatalf("failed to initialize db: %s", err.Error())
	}

	defer dbLogger.Close()

	router := gin.Default()
	// S W A G A. SWAGA
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	transactioner := transaction.NewSQLTransactioner(dbLogger)

	notificationService := notification.NewService(notification.NewRepository(dbLogger), email.NewService())

	app.RegisterHandlers(router.Group("/app"),
		app.NewService(),
	)
	auth.RegisterHandlers(router.Group("/auth"),
		auth.NewService(transactioner, user.NewRepository(dbLogger), notificationService),
	)
	user.RegisterHandlers(router.Group("/user"),
		user.NewService(transactioner, user.NewRepository(dbLogger)),
	)

	router.Run(":" + viper.GetString("general.port"))
}

func initConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")
	return viper.ReadInConfig()
}
